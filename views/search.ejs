<% include ../views/header %>
  <script
    src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>

  <% if (typeof error !=='undefined' && error !=null){ %>
    <div class="col-ms-12 text-center">
      <div class="alert alert-danger" role="alert">
        <%= error %>
      </div>
    </div>
    <% } else {%>
      <div class="col-ms-12 text-center">
        <img id="loadingGif" class="hidden" src="/images/loading.gif">
        <div id="searchPageAlert" class="alert hidden" role="alert">
        </div>
      </div>
      <% } %>

        <!-- Map Style -->
        <style>
          #map {
            height: 400px;
            width: 80%;
            margin: auto;
          }

          .map-frame {
            position: relative;
          }

          #floating-panel {
            position: absolute;
            bottom: 10px;
            left: 15%;
            z-index: 10;
            padding: 5px;
            text-align: center;
            font-family: "Roboto", "sans-serif";
            line-height: 30px;
            padding-left: 10px;
          }
        </style>
        <!-- Map Style over -->
        <!-- -->

        <style type="text/css">
          .searchForm fieldset .serach-query-row {
            width: 100%;
          }

          @media only screen and (min-width: 769px) {
            .searchForm fieldset .serach-query-row {
              white-space: nowrap;
            }
          }
        </style>

        <!-- MultiStep Form -->
        <div class="row">
          <div class="col-md-12 ">
            <form ref='searchForm' class="searchForm" id='uploadForm' action="/search" method="post">
              <!-- progressbar 
      <ul id="progressbar">
        <li class="active">Query</li>
        <li>Refine by Geo-Region</li>
        <li>Refine by Color Space</li>
      </ul>
    -->
              <fieldset>
                <h3 class="mb-3">Search Query </h3>
                <% if (typeof input !=='undefined' && input !=null && input.mappoly !=='undefined' &&
                  input.mappoly!==null){ %>
                  <input type="hidden" id='mappoly' name='mappoly' value="<%= input.mappoly %>">

                  <% } else {%>
                    <input type="hidden" id='mappoly' name='mappoly'>

                    <% } %>

                      <!-- <input type="hidden" value="<%= searchResult%>""> -->
                      <hr>
                      <!--
          <div class="col-md-3">
            <input type="text" class="form-control" name="institutioncode" id="institutioncode" placeholder="Institution code" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="collectioncode" id="collectioncode" placeholder="Collection code" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="cataloguenumber" id="cataloguenumber" placeholder="Catalogue number" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="class" id="class" placeholder="Class" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="order" id="order" placeholder="Order" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="family" id="family" placeholder="Family" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="genus" id="genus" placeholder="Genus" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="specificepithet" id="specificepithet" placeholder="Specific epithet" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="infraSpecificepithet" id="infraSpecificepithet" placeholder="Intraspecific Epithet" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="sex" id="sex" placeholder="Sex" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="lifestage" id="lifestage" placeholder="Life stage" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="country" id="country" placeholder="Country" value="">
          </div>
          <div class="col-md-3">
            <input type="text" class="form-control" name="patch" id="patch" placeholder="Patch" value="">
          </div>
          -->
                      <% if (typeof searchTerms !=='undefined' && searchTerms !=null && input !==null){ %>
                        <% for (var i=0; i < searchTerms.length; i++) { %>
                          <div class="col-md-3">
                            <!-- <label for="<%= searchTerms[i].Name %>"><%= searchTerms[i].Placeholder %></label> -->
                            <input type="text" class="form-control" name="<%= searchTerms[i].Name %>"
                              id="<%= searchTerms[i].Name %>" placeholder="<%= searchTerms[i].Placeholder %>"
                              value="<%= input[searchTerms[i].Name] %>" style="font-weight:bold;">
                          </div>
                          <% } %>
                            <% } else { %>
                              <% for (var i=0; i < searchTerms.length; i++) { %>
                                <div class="col-md-3">
                                  <!-- <label for="<%= searchTerms[i].Name %>"><%= searchTerms[i].Placeholder %></label> -->
                                  <input type="text" class="form-control" name="<%= searchTerms[i].Name %>"
                                    id="<%= searchTerms[i].Name %>" placeholder="<%= searchTerms[i].Placeholder %>"
                                    value="" style="font-weight:bold;">
                                </div>
                                <% } %>
                                  <% } %>
                                    <input type="hidden" id='mapCoordinate' name='mapCoordinate'>
                                    <input type="hidden" id='polyCoordinates' name='polyCoordinates'>
                                    <div class="col-md-3">
                                      <button style="display: block; margin: auto;" type="button" id=""
                                        class="btn btn-primary showMapBtn" onclick="showhidemap()">Show Map</button>
                                    </div>
                                    <div class="col-md-3">
                                      <button style="display: block; margin: auto;" type="submit" id=""
                                        class="btn btn-primary" value="Search!">Search</button>
                                    </div>


              </fieldset>
            </form>
          </div>
        </div>
        <br>
        <div class="col-md-12 map-container d-none">
          <div class="map-frame">
            <% if (typeof searchResult !=='undefined' && searchResult !=null){ %>
              <div class="result-coordinate-div alert alert-info">
                <p id="resultCoordinate" style="line-height: 40px;text-align: center;"></p>
              </div>
              <%}%>
                <div id="floating-panel">
                  <input id="clear-map" type="button" value="Clear Map" />
                </div>
                <div id="map"></div>
          </div>
        </div>
        <!-- Search Form -->
        <div class="row">
          <div class="col-md-12 ">
            <% if (typeof searchResult !=='undefined' && searchResult !=null){ %>
              <div class="col-ms-12 text-center">
                <div class="alert alert-success" role="alert" style="line-height: 40px;">
                  Displaying <%= searchResult.length %> Unique Results
                    <% if (searchResult.length> 0 ){ %>
                      (Found <%= searchResult[0].TotalSearchResultCount %> in Total)!
                        <!--<button type="button" class="btn btn-primary" style="position: absolute; right: 10px;" onclick="downloadAllResults()">Download All</button>-->
                        <form ref='downloadForm' class="downloadForm" id='downloadForm'
                          action="/search/downloadSearchResult" method="post">
                          <fieldset>
                            <input type="text" class="form-control hidden" name="SearchResultId" id="SearchResultId"
                              placeholder="SearchResultId" value="<%= searchResult[0].SearchResultId %>">
                            <button type="submit" id="" class="btn btn-primary" value="Download All!">Download</button>
                          </fieldset>
                        </form>
                        <% } %>
                </div>
              </div>
              <% } %>
          </div>
        </div>
        <% if(searchResult !==null){%>
          <div class="table-responsive" style="background: white;">
            <table class="table table-hover text-center">
              <thead class="thead-light">
                <tr>
                  <th scope="col">#</th>
                  <th scope="col">genus</th>
                  <th scope="col">specificEpithet</th>
                  <!-- <th scope="col">Infraspecific Epithet</th> -->
                  <th scope="col">sex</th>
                  <th scope="col">lifestage</th>
                  <th scope="col">Patch</th>
                  <th scope="col">catalogueNumber</th>
                  <th scope="col">Count</th>
                  <!-- <th scope="col">url</th> -->
                </tr>
              </thead>
              <tbody class="search-result-set">
                <% if(searchResult !==null){ %>
                  <% for (var i=0; i < searchResult.length; i++) { %>
                    <tr class="search-data-row">
                      <th scope="row">
                        <%= i+1 %>
                      </th>
                      <td>
                        <%= searchResult[i].genus %>
                      </td>
                      <td>
                        <%= searchResult[i].specificepithet %>
                      </td>
                      <!-- <td><%= searchResult[i].infraspecificepithet %></td> -->
                      <td>
                        <%= searchResult[i].sex %>
                      </td>
                      <td>
                        <%= searchResult[i].lifestage %>
                      </td>
                      <td>
                        <%= searchResult[i].patch %>
                      </td>
                      <td>
                        <%= searchResult[i].cataloguenumber %>
                      </td>
                      <td>
                        <%= searchResult[i].count %>
                      </td>
                      <!-- <td><a class="btn" href="<%= searchResult[i].url %>">Download</a></td> -->
                      <td class="hidden metaID">
                        <%= searchResult[i]._id %>
                      </td>
                      <td class="hidden dec-lat">
                        <%= searchResult[i].latitude %>
                      </td>
                      <td class="hidden dec-long">
                        <%= searchResult[i].longitude %>
                      </td>
                    </tr>
                    <% } %>
                      <% } %>
              </tbody>
            </table>
          </div>
          <% } %>
            <% include ../views/footer %>

              <script type="text/javascript">
                function downloadAllResults() {
                  var requestedData = $(".metaID").map(function () {
                    return $(this).context.textContent;
                  }).get();
                  $.post("/search/download", { ids: JSON.stringify(requestedData) }, function (retData) {
                    console.log(retData);
                    download("researchData.zip", retData);

                    $("body").append("<iframe src='" + retData.url + "' style='display: none;' ></iframe>");
                  }
                  );

                  function download(filename, data) {
                    var element = document.createElement('a');
                    element.setAttribute('href', 'data:text/plain;base64,' + data);
                    element.setAttribute('download', filename);

                    element.style.display = 'none';
                    document.body.appendChild(element);

                    element.click();

                    document.body.removeChild(element);
                  }
                }
              </script>
              <script
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&&libraries=drawing&v=weekly&channel=2"
                async></script>
              <script>
                var polysArray = [];
                var globalmap;
                var polydrawn;
                var drawingManager;
                // var infowindow;
                // var searchResult = "<%= searchResult %>"
                var rectangle;
                var polygon;
                function showhidemap() {  // Hide show function
                  if (document.querySelector('.map-container').classList.contains('d-none')) {
                    document.querySelector('.map-container').classList.remove('d-none');
                    document.querySelector('.showMapBtn').innerHTML = 'Hide Map'
                    resultWithCoordinate();
                  }
                  else {
                    document.querySelector('.map-container').classList.add('d-none');
                    document.querySelector('.showMapBtn').innerHTML = 'Show Map'
                  }
                  // checkonmap()
                }


                // initialize and load map when open the map page
                function initMap() {

                  const initPoint = new google.maps.LatLng(-23.85, -60.65);
                  const map = new google.maps.Map(document.getElementById("map"), {
                    center: initPoint,
                    zoom: 2,
                  });
                  globalmap = map;


                  drawingManager = new google.maps.drawing.DrawingManager({
                    drawingControl: true,
                    drawingControlOptions: {
                      position: google.maps.ControlPosition.TOP_CENTER,
                      drawingModes: [
                        google.maps.drawing.OverlayType.POLYGON,
                        google.maps.drawing.OverlayType.RECTANGLE,
                      ]
                    },
                    rectangleOptions: {
                      editable: true,
                      draggable: true
                    },
                    polygonOptions: {
                      editable: true,
                      draggable: true
                    }
                  });

                  // When overlay completed, it will be saved to polysArray.
                  google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                    drawingManager.setDrawingMode(null);
                    drawingManager.setMap(null);
                    polysArray.push(event.overlay)
                    if (event.type == 'rectangle') {
                      var northeast = event.overlay.getBounds().getNorthEast();
                      var southwest = event.overlay.getBounds().getSouthWest();

                      var point1 = { 'lat': northeast.lat(), 'lng': northeast.lng() }
                      var point2 = { 'lat': southwest.lat(), 'lng': southwest.lng() }

                      let cordinateString = point1.lat + '_' + point1.lng + '_' + point2.lat + '_' + point2.lng
                      let cookieObject = {};
                      cookieObject.type = 'rectangle';
                      cookieObject.points = cordinateString
                      document.getElementById('mapCoordinate').value = cordinateString
                      saveMapState(JSON.stringify(cookieObject))
                    }

                    else if (event.type == 'polygon') {
                      debugger
                      var coordinatesArray = event.overlay.getPath().getArray();
                      var cookieString = ''
                      for (let i = 0; i < coordinatesArray.length; i++) {
                        if (i != 0)
                          cookieString += '_'
                        const element = coordinatesArray[i];
                        cookieString += element.lat() + '_' + element.lng()
                      }
                      var copyCord = [...coordinatesArray];
                      var mapCordinatepoints = getMapCordinateForPolygon(copyCord)
                      document.getElementById('mapCoordinate').value = mapCordinatepoints



                      let cookieObject = {};
                      cookieObject.type = 'polygon';
                      cookieObject.points = cookieString
                      // console.log(cookieString);
                      document.getElementById('polyCoordinates').value = cookieString
                      saveMapState(JSON.stringify(cookieObject))
                      // localStorage.setItem('polygondrawn', JSON.stringify({ cordinate: coordinatesArray }))
                    }

                    event.overlay.addListener("bounds_changed", function (e) {
                      alert('bounds changed!');
                      // console.log(e)
                      if (event.type == 'rectangle') {
                        var northeast = event.overlay.getBounds().getNorthEast();
                        var southwest = event.overlay.getBounds().getSouthWest();

                        var point1 = { 'lat': northeast.lat(), 'lng': northeast.lng() }
                        var point2 = { 'lat': southwest.lat(), 'lng': southwest.lng() }

                        console.log(point1, '----', point2)

                        cookiString = point1.lat + '_' + point1.lng + '_' + point2.lat + '_' + point2.lng
                        document.getElementById('mapCoordinate').value = cookiString
                        saveMapState(cookiString)
                      }

                    });

                    event.overlay.addListener("mouseup", function () {
                      if (event.type == 'polygon') {
                        var coordinatesArray = event.overlay.getPath().getArray();
                        var cookieString = ''
                        for (let i = 0; i < coordinatesArray.length; i++) {
                          if (i != 0)
                            cookieString += '_'
                          const element = coordinatesArray[i];
                          cookieString += element.lat() + '_' + element.lng()
                        }
                        var copyCord = [...coordinatesArray];
                        var mapCordinatepoints = getMapCordinateForPolygon(copyCord)
                        document.getElementById('mapCoordinate').value = mapCordinatepoints

                        let cookieObject = {};
                        cookieObject.type = 'polygon';
                        cookieObject.points = cookieString
                        console.log(cookieString);
                        document.getElementById('polyCoordinates').value = cookieString
                        saveMapState(JSON.stringify(cookieObject))
                      }
                    })
                    event.overlay.addListener("click", function () {
                      alert('click')
                    })

                  });

                  debugger;
                  // setup drawingManager tool 
                  if (rectangle != null || polygon != null || polysArray.length > 0) {

                  }
                  else {
                    drawingManager.setMap(globalmap);
                  }
                  // if (JSON.parse(localStorage.getItem('polygondrawn')) != undefined) {
                  //   console.log(JSON.parse(localStorage.getItem('polygondrawn')))
                  // }
                  loadMapState();


                  if (rectangle != null) {
                    drawingManager.setMap(null)
                    rectangle.addListener("bounds_changed", function () {

                      console.log('bound changed!');

                      const ne = rectangle.getBounds().getNorthEast();
                      const sw = rectangle.getBounds().getSouthWest();

                      var mapZoom = globalmap.getZoom();
                      var mapCenter = globalmap.getCenter();
                      var mapLat = mapCenter.lat();
                      var mapLng = mapCenter.lng();

                      var point1 = { 'lat': ne.lat(), 'lng': ne.lng() }
                      var point2 = { 'lat': sw.lat(), 'lng': sw.lng() }

                      var extra = point1.lat + '_' + point1.lng + '_' + point2.lat + '_' + point2.lng;
                      let cookieObject = {};
                      cookieObject.type = 'rectangle';
                      cookieObject.points = extra
                      var cookiestring = mapLat + "|" + mapLng + "|" + mapZoom + "|" + JSON.stringify(cookieObject);
                      document.getElementById('mapCoordinate').value = extra
                      setCookie("myMapCookie", cookiestring, 30);
                    });
                  }

                  if (polygon != null) {
                    drawingManager.setMap(null)
                    polygon.addListener("mouseup", function () {
                      // alert('polygon')
                      var coordinatesArray = polygon.getPath().getArray();
                      var cookieString = ''
                      for (let i = 0; i < coordinatesArray.length; i++) {
                        if (i != 0)
                          cookieString += '_'
                        const element = coordinatesArray[i];
                        cookieString += element.lat() + '_' + element.lng()
                      }
                      var copyCord = [...coordinatesArray];
                      var mapCordinatepoints = getMapCordinateForPolygon(copyCord)
                      document.getElementById('mapCoordinate').value = mapCordinatepoints

                      let cookieObject = {};
                      cookieObject.type = 'polygon';
                      cookieObject.points = cookieString
                      console.log(cookieString);
                      document.getElementById('polyCoordinates').value = cookieString
                      saveMapState(JSON.stringify(cookieObject))
                    })
                  }
                }

                document.getElementById("clear-map").addEventListener("click", function () {
                  if (polysArray.length > 0) {
                    polysArray.forEach(element => {
                      element.setMap(null);
                    });
                  }
                  drawingManager.setMap(globalmap);
                  // localStorage.removeItem('polygondrawn') 
                  clearCookie("myMapCookie");
                  if (rectangle != null)
                    rectangle.setMap(null);
                  if (polygon != null)
                    polygon.setMap(null)
                  document.getElementById('polyCoordinates').value = null
                  document.getElementById('mapCoordinate').value = null
                });

                function saveMapState(extra) {
                  // const map = new google.maps.Map(document.getElementById("map"));
                  var mapZoom = globalmap.getZoom();
                  var mapCenter = globalmap.getCenter();
                  var mapLat = mapCenter.lat();
                  var mapLng = mapCenter.lng();
                  var cookiestring = mapLat + "|" + mapLng + "|" + mapZoom + "|" + extra;
                  setCookie("myMapCookie", cookiestring, 30);
                }

                function getMapCordinateForPolygon(polycordinatearray) {
                  const elementlat = [];
                  const elementlng = [];
                  for (let i = 0; i < polycordinatearray.length; i++) {
                    elementlat[i] = polycordinatearray[i].lat();
                    elementlng[i] = polycordinatearray[i].lng();
                  }
                  var elementLatSort = sortTest(elementlat);
                  var elementLngSort = sortTest(elementlng);

                  const maxLat = elementLatSort[elementLatSort.length - 1];
                  const minLat = elementLatSort[0];

                  const maxLng = elementLngSort[elementLngSort.length - 1];
                  const minLng = elementLngSort[0];
                  var cordinateString = maxLat + '_' + maxLng + '_' + minLat + '_' + minLng
                  return cordinateString
                }

                function getCoordinateFromStaticPoints(polycordinatearray) {
                  const elementlat = [];
                  const elementlng = [];
                  for (let i = 0; i < polycordinatearray.length; i++) {
                    elementlat[i] = polycordinatearray[i].lat;
                    elementlng[i] = polycordinatearray[i].lng;
                  }
                  var elementLatSort = sortTest(elementlat);
                  var elementLngSort = sortTest(elementlng);

                  const maxLat = elementLatSort[elementLatSort.length - 1];
                  const minLat = elementLatSort[0];

                  const maxLng = elementLngSort[elementLngSort.length - 1];
                  const minLng = elementLngSort[0];
                  var cordinateString = maxLat + '_' + maxLng + '_' + minLat + '_' + minLng
                  return cordinateString
                }

                function sortTest(arr) {
                  var len = arr.length;
                  for (var i = 0; i < len - 1; i++) {
                    for (var j = 0; j < len - 1 - i; j++) {
                      if (arr[j] > arr[j + 1]) {
                        var temp = arr[j + 1];
                        arr[j + 1] = arr[j];
                        arr[j] = temp;
                      }
                    }
                  }
                  return arr;
                }

                function loadMapState() {
                  var gotCookieString = getCookie("myMapCookie");
                  if (gotCookieString != "") {
                    var splitStr = gotCookieString.split("|");
                    var savedMapLat = parseFloat(splitStr[0]);
                    var savedMapLng = parseFloat(splitStr[1]);
                    var savedMapZoom = parseFloat(splitStr[2]);
                    var polyDetail = JSON.parse(splitStr[3])
                    if (polyDetail.type == 'rectangle') {
                      let recBounds = polyDetail.points;
                      let boundsplit = recBounds.split("_")
                      const northeast = {}
                      const southwest = {}
                      northeast.lat = parseFloat(boundsplit[0]);
                      northeast.lng = parseFloat(boundsplit[1]);
                      southwest.lat = parseFloat(boundsplit[2]);
                      southwest.lng = parseFloat(boundsplit[3]);
                      document.getElementById('mapCoordinate').value = recBounds
                      if ((!isNaN(savedMapLat)) && (!isNaN(savedMapLng)) && (!isNaN(savedMapZoom)) &&
                        (!isNaN(northeast.lat)) && (!isNaN(northeast.lng)) && (!isNaN(southwest.lat)) && (!isNaN(southwest.lng))) {
                        globalmap.setCenter(new google.maps.LatLng(savedMapLat, savedMapLng));
                        globalmap.setZoom(savedMapZoom);

                        rectangle = new google.maps.Rectangle({
                          editable: true,
                          draggable: true
                        })
                        rectangle.setBounds({
                          north: northeast.lat,
                          south: southwest.lat,
                          west: southwest.lng,
                          east: northeast.lng
                        })
                        rectangle.setMap(globalmap)
                      }
                    }
                    else if (polyDetail.type == 'polygon') {
                      let polyBounds = polyDetail.points;
                      let boundsplit = polyBounds.split("_")
                      let polygonbounds = []
                      for (let i = 0; i < boundsplit.length; i = i + 2) {
                        polygonbounds.push({ lat: parseFloat(boundsplit[i]), lng: parseFloat(boundsplit[i + 1]) });
                      }
                      var copyCord = [...polygonbounds];
                      var mapCordinatepoints = getCoordinateFromStaticPoints(copyCord)
                      document.getElementById('mapCoordinate').value = mapCordinatepoints
                      document.getElementById('polyCoordinates').value = polyBounds
                      polygon = new google.maps.Polygon({
                        paths: polygonbounds,
                        fillColor: '#000000',
                        fillOpacity: 0.35,
                        editable: true,
                        draggable: true
                      })
                      polygon.setMap(globalmap)
                    }
                  }
                }

                function setCookie(c_name, value, exdays) {
                  var exdate = new Date();
                  exdate.setDate(exdate.getDate() + exdays);
                  var c_value = escape(value) + ((exdays = null) ? "" : "; expires = " + exdate.toUTCString());
                  document.cookie = c_name + "=" + c_value;
                }

                function getCookie(c_name) {
                  var i, x, y, ARRcookies = document.cookie.split(";");
                  for (i = 0; i < ARRcookies.length; i++) {
                    x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
                    y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                    x = x.replace(/^\s+|\s+$/g, "");
                    if (x == c_name) {
                      return unescape(y);
                    }
                  }
                  return "";
                }

                function clearCookie(c_name) {
                  setCookie(c_name, "", -1);
                }

                function resultWithCoordinate() {
                  // Counting for results with longtitude and latitude. 
                  var count = 0;
                  // Counting for all results for been searched.
                  var sumResult = 0;
                  //Counting for longtitude and latitude of the results that are not a number.
                  var countNaN = 0;

                  // console.log(myLatLng1.lat);
                  // const searchRows1 = document.querySelectorAll(myLatLng1);
                  // console.log(searchRows1);

                  //Get the result from the database.
                  const searchRows = document.querySelectorAll('.search-result-set .search-data-row')
                  // console.log(searchRows)

                  //Declare a new array to store the marker position pairs.
                  var markArray = []
                  //Loop every results in the searchRows and find lattitude and longitude for each results.
                  searchRows.forEach(term => {
                    //Declare lat1 and long1 to store lattitude and longitude from dataset
                    var lat1 = term.querySelector('.dec-lat').innerHTML;
                    var long1 = term.querySelector('.dec-long').innerHTML;

                    //Convert lat1 and long1 to become float format.
                    var latFloat = parseFloat(lat1);
                    var longFloat = parseFloat(long1);

                    // console.log(latFloat);
                    //Check for lattitude and longitude for all the results and find that are not a number.  
                    if (isNaN(latFloat) || isNaN(longFloat)) {
                      //Counting for result that is not a number.
                      console.log("Has NaN");
                      countNaN++;
                    } else {
                      //Counting for result that are number.
                      count++;

                      //Use nmark to save the pair of longitude and latitude of the result.
                      let nmark = new google.maps.Marker({
                        position: { 'lat': latFloat, 'lng': longFloat },
                        globalmap
                      });
                      //Push the nmark, the pair of long and lat into the markArray.
                      markArray.push(nmark)
                    }

                    sumResult++;
                    //////////////Find decimal lattitude longitude
                  })
                  // add cluster optopm
                  const clusterOptions = {

                    imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
                    gridSize: 30,
                    zoomOnClick: false,
                    maxZoom: 10,
                  };

                  // Enable marker clustering for this map and these markers
                  const markerClusterer = new MarkerClusterer(globalmap, markArray, clusterOptions);
                  //new MarkerClusterer({ markers, map });
                  // infowindow = new google.maps.InfoWindow({
                  //   content: " "
                  // })

                  //  console.log(count);
                  if (document.getElementById('resultCoordinate'))
                    document.getElementById('resultCoordinate').innerHTML = 'Displaying location of ' + count + ' unique records out of ' + sumResult + ' records in total !'
                }
              </script>
              <script>
                var list = document.getElementsByClassName("dropdown-item-cache-clear");
                for (var i in list) {
                  list[i].onclick = clearCache;
                }
                function clearCache() {
                  drawingManager.setMap(globalmap);
                  if (polysArray.length > 0) {
                    polysArray.forEach(element => {
                      element.setMap(null);
                    });
                  }
                  // localStorage.removeItem('polygondrawn') 
                  clearCookie("myMapCookie");
                  rectangle.setMap(null);
                }
              </script>